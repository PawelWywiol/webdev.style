<script>
  const resolveMediaPlayer = (element: Element) => {
    const parent = element.parentElement;
    const imageSrc = element.getAttribute('src');
    const videoUrl = element.getAttribute('data-video');
    const videoElement = document.createElement('video');

    if (!parent || !imageSrc?.length || !videoUrl?.length) {
      return;
    }

    videoElement.setAttribute('poster', imageSrc);
    videoElement.setAttribute('controls', 'false');
    videoElement.setAttribute('loop', 'true');
    videoElement.setAttribute('muted', 'true');
    videoElement.setAttribute('playsinline', 'true');
    videoElement.setAttribute('autoplay', 'true');

    element.removeAttribute('data-video');

    const elementObvserver = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          if (!parent.classList.contains('media-player')) {
            videoElement.setAttribute('src', videoUrl);
            parent.classList += 'relative media-player';
            parent.appendChild(videoElement);
          }

          videoElement.style.opacity = '1';

          videoElement.play().catch(() => {
            videoElement.style.opacity = '0';
          });
        }
      });
    });

    elementObvserver.observe(element);

    videoElement.addEventListener('play', () => {
      videoElement.style.opacity = '1';
    });

    videoElement.addEventListener('pause', () => {
      videoElement.style.opacity = '0';
    });

    element.addEventListener('click', () => {
      if (videoElement.paused) {
        videoElement.play();
      } else {
        videoElement.pause();
      }
    });
  };

  const dataVideoElements = document.querySelectorAll('img[data-video]');

  for (const element of dataVideoElements) {
    resolveMediaPlayer(element);
  }
</script>
